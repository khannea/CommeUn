{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = nodeChildrenToScrollState;\n\nfunction nodeChildrenToScrollState(_ref) {\n  var children = _ref.children,\n      scrollTop = _ref.scrollTop;\n  var list = []; // used to increment children view heights\n\n  var start = 0; // Fix: default props\n  // let { theshold } = this.props\n\n  var theshold = 0.5; // TODO: experiment a map\n\n  for (var i = 0; i < children.length; i++) {\n    var _children$i = children[i],\n        offsetHeight = _children$i.offsetHeight,\n        attributes = _children$i.attributes; // interpreting native values\n\n    var viewHeight = offsetHeight;\n    var end = start + viewHeight; // current position values\n\n    var position = start - scrollTop;\n    var positionRatio = position / offsetHeight;\n    var positionRatioRemainer = positionRatio <= -1 ? 1 : positionRatio >= 1 ? 1 : Math.abs(positionRatio % 1);\n    /* Used for creating navigations and  to links to\n    *  <Link to=\"Home\" />\n    */\n    // Conditionals\n    // FIX: use exact values\n\n    var onView = positionRatio <= theshold && positionRatio >= -theshold;\n    var onFrame = position === scrollTop; // TODO: review active\n    // TODO: addfunction to run on activate()\n\n    var active = onView;\n    list.push({\n      position: position,\n      positionRatio: positionRatio,\n      positionRatioRemainer: positionRatioRemainer,\n      start: start,\n      end: end,\n      viewHeight: viewHeight,\n      onView: onView,\n      active: active,\n      onFrame: onFrame\n    }); // increament based on stacked item's height\n\n    start += offsetHeight;\n  }\n\n  return {\n    children: list\n  };\n}","map":{"version":3,"sources":["C:/Users/khanh/workspace/Code/commeun/frontend/node_modules/react-skroll/lib/nodeChildrenToScrollState.js"],"names":["Object","defineProperty","exports","value","default","nodeChildrenToScrollState","_ref","children","scrollTop","list","start","theshold","i","length","_children$i","offsetHeight","attributes","viewHeight","end","position","positionRatio","positionRatioRemainer","Math","abs","onView","onFrame","active","push"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,yBAAlB;;AAEA,SAASA,yBAAT,CAAmCC,IAAnC,EAAyC;AACvC,MAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;AAAA,MACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAEA,MAAIC,IAAI,GAAG,EAAX,CAHuC,CAGxB;;AAEf,MAAIC,KAAK,GAAG,CAAZ,CALuC,CAKxB;AACf;;AAEA,MAAIC,QAAQ,GAAG,GAAf,CARuC,CAQnB;;AAEpB,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACM,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,QAAIE,WAAW,GAAGP,QAAQ,CAACK,CAAD,CAA1B;AAAA,QACIG,YAAY,GAAGD,WAAW,CAACC,YAD/B;AAAA,QAEIC,UAAU,GAAGF,WAAW,CAACE,UAF7B,CADwC,CAGC;;AAEzC,QAAIC,UAAU,GAAGF,YAAjB;AACA,QAAIG,GAAG,GAAGR,KAAK,GAAGO,UAAlB,CANwC,CAMV;;AAE9B,QAAIE,QAAQ,GAAGT,KAAK,GAAGF,SAAvB;AACA,QAAIY,aAAa,GAAGD,QAAQ,GAAGJ,YAA/B;AACA,QAAIM,qBAAqB,GAAGD,aAAa,IAAI,CAAC,CAAlB,GAAsB,CAAtB,GAA0BA,aAAa,IAAI,CAAjB,GAAqB,CAArB,GAAyBE,IAAI,CAACC,GAAL,CAASH,aAAa,GAAG,CAAzB,CAA/E;AACA;;;AAGA;AACA;;AAEA,QAAII,MAAM,GAAGJ,aAAa,IAAIT,QAAjB,IAA6BS,aAAa,IAAI,CAACT,QAA5D;AACA,QAAIc,OAAO,GAAGN,QAAQ,KAAKX,SAA3B,CAlBwC,CAkBF;AACtC;;AAEA,QAAIkB,MAAM,GAAGF,MAAb;AACAf,IAAAA,IAAI,CAACkB,IAAL,CAAU;AACRR,MAAAA,QAAQ,EAAEA,QADF;AAERC,MAAAA,aAAa,EAAEA,aAFP;AAGRC,MAAAA,qBAAqB,EAAEA,qBAHf;AAIRX,MAAAA,KAAK,EAAEA,KAJC;AAKRQ,MAAAA,GAAG,EAAEA,GALG;AAMRD,MAAAA,UAAU,EAAEA,UANJ;AAORO,MAAAA,MAAM,EAAEA,MAPA;AAQRE,MAAAA,MAAM,EAAEA,MARA;AASRD,MAAAA,OAAO,EAAEA;AATD,KAAV,EAtBwC,CAgCpC;;AAEJf,IAAAA,KAAK,IAAIK,YAAT;AACD;;AAED,SAAO;AACLR,IAAAA,QAAQ,EAAEE;AADL,GAAP;AAGD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = nodeChildrenToScrollState;\n\nfunction nodeChildrenToScrollState(_ref) {\n  var children = _ref.children,\n      scrollTop = _ref.scrollTop;\n  var list = []; // used to increment children view heights\n\n  var start = 0; // Fix: default props\n  // let { theshold } = this.props\n\n  var theshold = 0.5; // TODO: experiment a map\n\n  for (var i = 0; i < children.length; i++) {\n    var _children$i = children[i],\n        offsetHeight = _children$i.offsetHeight,\n        attributes = _children$i.attributes; // interpreting native values\n\n    var viewHeight = offsetHeight;\n    var end = start + viewHeight; // current position values\n\n    var position = start - scrollTop;\n    var positionRatio = position / offsetHeight;\n    var positionRatioRemainer = positionRatio <= -1 ? 1 : positionRatio >= 1 ? 1 : Math.abs(positionRatio % 1);\n    /* Used for creating navigations and  to links to\n    *  <Link to=\"Home\" />\n    */\n    // Conditionals\n    // FIX: use exact values\n\n    var onView = positionRatio <= theshold && positionRatio >= -theshold;\n    var onFrame = position === scrollTop; // TODO: review active\n    // TODO: addfunction to run on activate()\n\n    var active = onView;\n    list.push({\n      position: position,\n      positionRatio: positionRatio,\n      positionRatioRemainer: positionRatioRemainer,\n      start: start,\n      end: end,\n      viewHeight: viewHeight,\n      onView: onView,\n      active: active,\n      onFrame: onFrame\n    }); // increament based on stacked item's height\n\n    start += offsetHeight;\n  }\n\n  return {\n    children: list\n  };\n}"]},"metadata":{},"sourceType":"script"}