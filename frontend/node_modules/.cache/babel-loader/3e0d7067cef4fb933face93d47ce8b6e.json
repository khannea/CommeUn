{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\khanh\\\\workspace\\\\commeun\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { AUTH_BEGIN, AUTH_SUCCESS, AUTH_FAILURE, LOGOUT_SUCCESS } from \"./actions\";\nconst initialState = {\n  pseudo: localStorage.getItem(\"pseudo\"),\n  budget: 0,\n  auth: false,\n  loading: false,\n  error: null\n};\nexport function authReducer(state = initialState, action) {\n  switch (action.type) {\n    case AUTH_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case AUTH_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        auth: true\n      });\n\n    case AUTH_FAILURE:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error\n      });\n\n    case LOGOUT_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        auth: false\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/khanh/workspace/commeun/frontend/src/store/reducers.js"],"names":["AUTH_BEGIN","AUTH_SUCCESS","AUTH_FAILURE","LOGOUT_SUCCESS","initialState","pseudo","localStorage","getItem","budget","auth","loading","error","authReducer","state","action","type","payload"],"mappings":";AAAA,SACEA,UADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,cAJF,QAKO,WALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAEC,YAAY,CAACC,OAAb,CAAqB,QAArB,CADW;AAEnBC,EAAAA,MAAM,EAAE,CAFW;AAGnBC,EAAAA,IAAI,EAAE,KAHa;AAInBC,EAAAA,OAAO,EAAE,KAJU;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;AAQA,OAAO,SAASC,WAAT,CAAqBC,KAAK,GAAGT,YAA7B,EAA2CU,MAA3C,EAAmD;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,UAAL;AACE;AACA;AACA,+BACKa,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMF,SAAKV,YAAL;AACE;AACA;AACA,+BACKY,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGED,QAAAA,IAAI,EAAE;AAHR;;AAMF,SAAKP,YAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BACKW,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAHxB;;AAMF,SAAKR,cAAL;AACE;AACA;AACA,+BACKU,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGED,QAAAA,IAAI,EAAE;AAHR;;AAKF;AACE;AACA,aAAOI,KAAP;AA3CJ;AA6CD","sourcesContent":["import {\r\n  AUTH_BEGIN,\r\n  AUTH_SUCCESS,\r\n  AUTH_FAILURE,\r\n  LOGOUT_SUCCESS\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  pseudo: localStorage.getItem(\"pseudo\"),\r\n  budget: 0,\r\n  auth: false,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\nexport function authReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case AUTH_BEGIN:\r\n      // Mark the state as \"loading\" so we can show a spinner or something\r\n      // Also, reset any errors. We're starting fresh.\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_SUCCESS:\r\n      // All done: set loading \"false\".\r\n      // Also, replace the items with the ones from the server\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        auth: true\r\n      };\r\n\r\n    case AUTH_FAILURE:\r\n      // The request failed. It's done. So set loading to \"false\".\r\n      // Save the error, so we can display it somewhere.\r\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\r\n      //\r\n      // This is all up to you and your app though:\r\n      // maybe you want to keep the items around!\r\n      // Do whatever seems right for your use case.\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload.error\r\n      };\r\n\r\n    case LOGOUT_SUCCESS:\r\n      // All done: set loading \"false\".\r\n      // Also, replace the items with the ones from the server\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        auth: false\r\n      };\r\n    default:\r\n      // ALWAYS have a default case in a reducer\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}